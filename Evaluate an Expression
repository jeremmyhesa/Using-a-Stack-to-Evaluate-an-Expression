#include <iostream>
using namespace std;

struct node{
	char isi;
	node *skip;
};

//
class stack{
  private:
	node *head=NULL;
	
  public:
	bool isEmpty(){
		if(head==NULL)
			return true;
		return false;
		}
//		
	void pushtostack(char a){
		node *baru=new node;
		baru->isi=a;
		baru->skip=NULL;
		if(isEmpty()){
			head=baru;
		}
		
		else{
			baru->skip=head;
			head=baru;
		}
	}
	char popfromstack(){
		if(isEmpty()){
			cout<<"Stack kosong!"<<endl;
			return 0;
		}
      		else{
			char ch=head->isi;
			node *tmp=head->skip;
			delete head;
			head=tmp;
			return ch;
		}
	}
//	
    	char top(){
		return head->isi;
	}	
    	void cetak(){
      		if(isEmpty()){
			cout<<"Stack Kosong!";
		}
      		else{
			node *bantu=head;
			while(bantu!=NULL){
			cout<<bantu->isi<<endl;
			bantu=bantu->skip;
			}
		}
	}    
};

int cek(char cekoprtr){	
	if(cekoprtr=='*'||cekoprtr=='/')
		return 2;
	else
		return 1;
}

//
int main(){
	stack S;
	int i=0,n=0,A,B,C;
	char postfix[20];
	char infix[20];
  
	cin>>infix;
	while(infix[i]!='\0'){
		if(isdigit(infix[i])){
			postfix[n]=infix[i];
			n++;
		}
		else if(infix[i]=='('){
			S.pushtostack(infix[i]);
		}
		else if(infix[i]==')'){
			while(!S.isEmpty() && S.top()!='('){
				postfix[n]=S.popfromstack();
				n++;
			}
			S.popfromstack();
		}
		else{
			if(S.isEmpty() || S.top()=='('){
				S.pushtostack(infix[i]);
			}
			else{
				while(!S.isEmpty() && S.top()!='(' && cek(infix[i])<=cek(S.top())){
					postfix[n]=S.popfromstack();
					n++;
				}
				S.pushtostack(infix[i]);
			}
		}
		i++;
	}
